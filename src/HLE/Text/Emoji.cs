using System;
using System.Collections.Frozen;
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics.Contracts;
using HLE.Memory;

namespace HLE.Text;

/// <summary>
/// A class that contains (almost) all existing emojis.
/// </summary>
/// <remarks>
/// Members are generated by a source generator.
/// Emojis will be string constants, e.g.:
/// <c>public const string Grinning = "ðŸ˜€";</c>
/// </remarks>
public static partial class Emoji
{
    public static ImmutableArray<string> All => s_emojis.Items;

#pragma warning disable S3459 // it is not unassigned. implementation is source generated.
    private static partial FrozenDictionary<string, string> EmojisByName { get; }
#pragma warning restore S3459

    private static readonly FrozenSet<string> s_emojis = EmojisByName.Values.ToFrozenSet();

    public static bool TryGetEmoji(string name, [MaybeNullWhen(false)] out string emoji) => EmojisByName.TryGetValue(name, out emoji);

    [Pure]
    public static bool IsEmoji(char c) => IsEmoji(new ReadOnlySpan<char>(ref c));

    [Pure]
    public static bool IsEmoji(string text) => s_emojis.Contains(text);

    [Pure]
    public static bool IsEmoji(ref PooledInterpolatedStringHandler text)
    {
        bool result = IsEmoji(text.Text);
        text.Dispose();
        return result;
    }

    [Pure]
    public static bool IsEmoji(ReadOnlySpan<char> text)
    {
        using NativeString str = new(text);
        return IsEmoji(str.AsString());
    }
}
