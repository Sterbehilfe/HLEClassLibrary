using System;
using System.Collections.Frozen;
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using HLE.Memory;

namespace HLE.Text;

/// <summary>
/// A class that contains (almost) all existing emojis.
/// </summary>
public static partial class Emoji
{
#pragma warning disable S125 // this is not commented out code
    // Members are generated by a source generator.
    // Emojis will be string constants, e.g.:
    // public const string Grinning = "ðŸ˜€";
#pragma warning restore S125

    public static ImmutableArray<string> All => s_emojis.Items;

    private static readonly FrozenDictionary<string, string> s_emojisByName = typeof(Emoji)
        .GetFields(BindingFlags.Public | BindingFlags.Static)
        .Where(static f => f.FieldType == typeof(string))
        .ToFrozenDictionary(
            static f => f.Name,
            static f => Unsafe.As<string>(f.GetValue(null))!,
            StringComparer.OrdinalIgnoreCase
        );

    private static readonly FrozenSet<string> s_emojis = s_emojisByName.Values.ToFrozenSet();

    public static bool TryGetEmoji(string name, [MaybeNullWhen(false)] out string emoji) => s_emojisByName.TryGetValue(name, out emoji);

    [Pure]
    public static bool IsEmoji(char c) => IsEmoji(new ReadOnlySpan<char>(ref c));

    [Pure]
    public static bool IsEmoji(string text) => s_emojis.Contains(text);

    [Pure]
    public static bool IsEmoji(ref PooledInterpolatedStringHandler text)
    {
        bool result = IsEmoji(text.Text);
        text.Dispose();
        return result;
    }

    [Pure]
    public static bool IsEmoji(ReadOnlySpan<char> text)
    {
        using NativeString str = new(text);
        return IsEmoji(str.AsString());
    }
}
